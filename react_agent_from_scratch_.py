# -*- coding: utf-8 -*-
"""ReAct agent from scratch .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LPRZHWfcWiW5iZ_AmHNmJAGk5ijakj8W

# üîÅ ReAct Agent from Scratch ‚Äì Full Explanation

This is a **complete, self-contained ReAct (Reason + Act) agent** built **from scratch in pure Python**, without using any high-level frameworks like LangChain or LlamaIndex.

It can:
- Think step-by-step
- Use tools (like calculator, planet mass lookup)
- Learn from results
- Keep going until it finds the answer

All with just basic Python, an LLM API (like Groq), and clear logic.

---

## üß† What Is a ReAct Agent?

"ReAct" stands for **Reason + Act**.

Instead of just answering a question in one go, a ReAct agent follows a loop:
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install groq

import os
from groq import Groq

client = Groq(api_key=" ")

chat_completion = client.chat.completions.create(
    messages=[
        {"role": "user", "content": "Explain the importance of fast language models"}
    ],
    model="llama-3.3-70b-versatile",
)

print(chat_completion.choices[0].message.content)

"""**ReAct Agent in a Loop**

"""

class ReActAgent:
    def __init__(self, client, system_prompt):
        self.client = client
        self.system_prompt = system_prompt
        self.messages = [{"role": "system", "content": system_prompt}]
        self.step_count = 0
        self.max_steps = 10  # Prevent infinite loops

    def __call__(self, user_input):
        print(f"User: {user_input}")
        print("-" * 60)

        self.messages.append({"role": "user", "content": user_input})

        while self.step_count < self.max_steps:
            self.step_count += 1
            print(f"\nüîÅ Step {self.step_count}")

            # Call LLM
            completion = self.client.chat.completions.create(
                model="llama-3.3-70b-versatile",
                messages=self.messages,
                temperature=0.3,  # More deterministic
            )
            result = completion.choices[0].message.content.strip()
            print(f"Assistant: {result}")

            # Check for final answer
            if "Answer:" in result:
                self.messages.append({"role": "assistant", "content": result})
                print("-" * 60)
                print("‚úÖ Final Answer:", result)
                self.step_count = 0  # Reset for next call
                return result

            # Detect Action + PAUSE
            if "Action:" in result and "PAUSE" in result:
                try:
                    start = result.find("Action:") + len("Action:")
                    end = result.find("PAUSE")
                    action_block = result[start:end].strip()

                    if ":" not in action_block:
                        raise ValueError("Invalid action format")

                    action_type, action_value = action_block.split(":", 1)
                    action_type = action_type.strip().lower()
                    action_value = action_value.strip()

                    # Run the tool
                    if action_type == "calculate":
                        obs = calculate(action_value)
                        observation = f"Observation: {obs}"
                    elif action_type == "get_planet_mass":
                        obs = get_planet_mass(action_value)
                        if obs is None:
                            observation = "Observation: Planet not found"
                        else:
                            observation = f"Observation: {obs}"
                    else:
                        observation = "Observation: Unknown action"

                    # Log observation
                    print(f"{observation}")

                    # Append to messages
                    self.messages.append({"role": "assistant", "content": result})
                    self.messages.append({"role": "user", "content": observation})
                    continue
                except Exception as e:
                    error_msg = f"Observation: Tool execution failed: {str(e)}"
                    print(error_msg)
                    self.messages.append({"role": "assistant", "content": result})
                    self.messages.append({"role": "user", "content": error_msg})
                    continue
            else:
                # No action, just return
                self.messages.append({"role": "assistant", "content": result})
                print("-" * 60)
                return result

        # Max steps reached
        fallback = "Answer: I couldn't find a solution within the allowed steps."
        self.messages.append({"role": "assistant", "content": fallback})
        print("-" * 60)
        print("‚ö†Ô∏è Max steps reached. Giving up.")
        print("Final Answer:", fallback)
        self.step_count = 0
        return fallback

system_prompt = """
You run in a loop of Thought, Action, PAUSE, Observation.
At the end of the loop you output an Answer.
Use Thought to reason step by step.
Use Action to call one of the available tools.
Always say PAUSE after Action.
Wait for Observation before continuing.

Available actions:
- calculate: <expression>
  Evaluates math using Python syntax. Use decimals when needed.
  Example: calculate: 4.5 * 3.2

- get_planet_mass: <planet>
  Returns mass of planet in kg. Use lowercase planet names.
  Example: get_planet_mass: earth

Important:
- Only one action per turn.
- Never make up observations.
- Be precise with numbers.
- When done, say "Answer: ..."

Example:
Question: What is Earth's mass times 2?
Thought: I need to get Earth's mass.
Action: get_planet_mass: earth
PAUSE
""".strip()

def calculate(operation: str) -> str:
    try:
        # Clean input
        op = operation.strip().replace(' ', '')
        # Simple safety: only allow numbers, operators, and .e
        if not re.match(r'^[0-9+\-*/().eœÄ]+$', op):
            return "Invalid characters in expression"
        # Replace œÄ
        op = op.replace('œÄ', '3.14159')
        result = eval(op, {"__builtins__": {}}, {})
        return f"{float(result):.4e}"
    except Exception as e:
        return f"Calculation error: {str(e)}"

def get_planet_mass(planet) -> float:
    planet = str(planet).strip().lower()  # Normalize
    masses = {
        "mercury": 3.3011e23,
        "venus": 4.8675e24,
        "earth": 5.972e24,
        "mars": 6.4171e23,
        "jupiter": 1.898e27,
        "saturn": 5.683e26,
        "uranus": 8.681e25,
        "neptune": 1.024e26,
        "moon": 7.342e22,
        "pluto": 1.309e22
    }
    return masses.get(planet, None)

import re  # Needed for calculate

agent = ReActAgent(client, system_prompt)

agent("What is the mass of Earth multiplied by 3?")

agent("What is half the mass of Jupiter?")

agent("What is the square root of the mass of Mars?")

agent("What is the mass of Pluto times 4?")

agent("What is the mass of Zorgon times 2?")

"""**Run Manually**"""

class ReActAgentManual:
    def __init__(self, client, system_prompt):
        self.client = client
        self.system_prompt = system_prompt
        self.messages = [{"role": "system", "content": system_prompt}]
        self.step_count = 0
        self.max_steps = 6

    def __call__(self, user_input):
        print(f"User: {user_input}")
        print("-" * 60)
        self.messages.append({"role": "user", "content": user_input})
        return self.step()  # First step

    def step(self):
        if self.step_count >= self.max_steps:
            print("‚èπÔ∏è Max steps reached.")
            return "Answer: Could not complete in time."

        self.step_count += 1
        print(f"\nüîÅ Manual Step {self.step_count}")

        completion = client.chat.completions.create(
            model="llama-3.3-70b-versatile",
            messages=self.messages
        )
        result = completion.choices[0].message.content.strip()
        print(f"Assistant: {result}")

        # Check for final answer
        if "Answer:" in result:
            self.messages.append({"role": "assistant", "content": result})
            print("-" * 60)
            print("‚úÖ Final Answer:", result)
            self.step_count = 0
            return result

        # Check for Action + PAUSE
        if "Action:" in result and "PAUSE" in result:
            try:
                start = result.find("Action:") + len("Action:")
                end = result.find("PAUSE")
                action_block = result[start:end].strip()

                if ":" not in action_block:
                    print("‚ö†Ô∏è Invalid action format")
                    return result

                action_type, action_value = action_block.split(":", 1)
                action_type = action_type.strip().lower()
                action_value = action_value.strip()

                # Run tool
                if action_type == "calculate":
                    obs = calculate(action_value)
                elif action_type == "get_planet_mass":
                    obs = get_planet_mass(action_value)
                else:
                    obs = "Unknown action"

                observation = f"Observation: {obs}"
                print(observation)

                # Append to history
                self.messages.append({"role": "assistant", "content": result})
                self.messages.append({"role": "user", "content": observation})

                # Return so YOU decide when to call .step() again
                return result
            except Exception as e:
                error = f"Observation: Tool error: {str(e)}"
                print(error)
                self.messages.append({"role": "assistant", "content": result})
                self.messages.append({"role": "user", "content": error})
                return result
        else:
            # No action, just return
            self.messages.append({"role": "assistant", "content": result})
            print("-" * 60)
            return result

system_prompt = """
You run in a loop of Thought, Action, PAUSE, Observation.
At the end of the loop you output an Answer.

Available actions:
- calculate: <expr>
- get_planet_mass: <planet>

Example:
Thought: I need Earth's mass
Action: get_planet_mass: earth
PAUSE
""".strip()

agent = ReActAgentManual(client, system_prompt)

# Step 1: Start
agent("What is Earth's mass times 2?")

agent.step()

agent.step()